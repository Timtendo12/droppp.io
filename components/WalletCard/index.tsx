import React from 'react'
import { formatUSDC } from '@/util/currencyHelpers'
import classNames from 'classnames'
import { designSystem } from '@/util/tailwindHelpers'

const X_PAD = 24
const BUTTON_GAP = 16
const CARD_WIDTH = 343
const CARD_HEIGHT = 212
const DEFAULT_TEXT_FILL = 'rgba(255,255,255,.64)'

const WALLET_LABELS = {
  locked: 'Locked',
  premium: 'Verified',
  default: 'Unverified',
  failed: 'Locked'
}

const BORDER_STROKE = {
  default: designSystem.colors['gray-600'],
  premium: 'url(#rainbowGradient)',
  locked: designSystem.colors['error'],
  failed: designSystem.colors['gray-600']
}

const BG_FILL = {
  default: 'url(#defaultGradient)',
  premium: 'url(#rainbowGradient/24)',
  locked: designSystem.colors['error-opaque'],
  failed: 'url(#defaultGradient)'
}

export enum WalletCardType {
  Locked = 'locked',
  Premium = 'premium',
  Default = 'default',
  Failed = 'failed'
}

type Props = {
  type: WalletCardType
  onWithdrawFunds: () => void
  onAddFunds: () => void
  disableAddFunds?: boolean
  disableWithdrawFunds?: boolean
  balance: number
}

function WalletCard({
  balance = 0,
  type = WalletCardType.Premium,
  onWithdrawFunds,
  onAddFunds,
  disableAddFunds,
  disableWithdrawFunds
}: Props) {
  const label = WALLET_LABELS[type] || WALLET_LABELS.default
  const priceString = balance ? formatUSDC(balance) : 0

  const isCompleted = type === WalletCardType.Premium
  const isLocked = type === WalletCardType.Locked
  const isFailed = type === WalletCardType.Failed

  const showWithdrawFunds = (balance || 0) > 0
  const preventAddFunds = disableAddFunds || isLocked || isFailed
  const preventWithdrawFunds = disableWithdrawFunds || isLocked || isFailed

  const labelFill =
    isLocked || isFailed ? designSystem.colors['error'] : DEFAULT_TEXT_FILL

  const balanceFill = isLocked
    ? DEFAULT_TEXT_FILL
    : designSystem.colors['white']
  const logoMarkFill = balanceFill

  const borderStroke = BORDER_STROKE[type]
  const bgFill = BG_FILL[type]

  return (
    <svg
      className="leading-none w-full h-full"
      width={CARD_WIDTH}
      height={CARD_HEIGHT}
      viewBox={`0 0 ${CARD_WIDTH} ${CARD_HEIGHT}`}
    >
      <defs>
        <linearGradient
          id="rainbowGradient/24"
          gradientTransform="rotate(-45,.5,.5)"
        >
          <stop offset="0" stopColor="#2577F1" stopOpacity={0.24} />
          <stop offset=".5" stopColor="#FF00DB" stopOpacity={0.24} />
          <stop offset="1" stopColor="#FFDA4A" stopOpacity={0.24} />
        </linearGradient>

        <linearGradient
          id="defaultGradient"
          gradientTransform="rotate(-45,.5,.5)"
        >
          <stop offset="0" stopColor="#1e1e1e" stopOpacity={1} />
          <stop offset="1" stopColor="#333333" stopOpacity={1} />
        </linearGradient>

        <linearGradient
          id="defaultIconGradient"
          gradientTransform="rotate(-45,.5,.5)"
        >
          <stop offset="0" stopColor="#000" stopOpacity={0} />
          <stop offset="1" stopColor="#fff" stopOpacity={1} />
        </linearGradient>

        <linearGradient
          id="lockedIconGradient"
          gradientTransform="rotate(-45,.5,.5)"
        >
          <stop offset="0" stopColor="#FFF" stopOpacity={0} />
          <stop offset="1" stopColor="#fff" stopOpacity={0.64} />
        </linearGradient>

        <linearGradient
          id="rainbowGradient"
          gradientTransform="rotate(-45,.5,.5)"
        >
          <stop offset="0" stopColor="#2577F1" />
          <stop offset=".5" stopColor="#FF00DB" />
          <stop offset="1" stopColor="#FFDA4A" />
        </linearGradient>

        <clipPath id="cardClip">
          <rect x="1" y="1" width="341" height="210" rx="32" />
        </clipPath>
      </defs>

      {/* Container */}
      <rect
        x="1"
        y="1"
        width={CARD_WIDTH - 2}
        height={CARD_HEIGHT - 2}
        fill={bgFill}
        stroke={borderStroke}
        rx="32"
        strokeWidth="1"
      />

      {/* BG LOGO */}
      <g clipPath='url("#cardClip")'>
        <path
          id="bgLogo"
          transform={`translate(0,${X_PAD})`}
          opacity={0.1}
          fillRule="evenodd"
          clipRule="evenodd"
          d="M183.689 75.4267C184.586 75.4267 185.485 75.4519 186.384 75.4967L151.634 229.671L151.426 230.508C149.835 236.603 146.048 241.785 140.687 245.169C135.088 248.701 128.449 249.844 121.987 248.373C108.682 245.351 100.307 232.065 103.321 218.758L125.015 122.894L125.256 121.871C132.001 94.3396 156.715 75.4267 183.689 75.4267ZM205.938 79.8412C217.215 84.4294 226.789 92.334 233.504 102.802C242.198 116.356 245.024 132.468 241.459 148.168C234.935 176.879 208.568 196.021 180.104 194.45L205.938 79.8412ZM98.7467 148.115C91.7861 176.568 65.6324 195.822 37.6133 194.509L72.369 40.3321L72.5735 39.4945C74.1645 33.3994 77.9544 28.2146 83.31 24.8337C88.9122 21.2988 95.5535 20.1615 102.013 21.6293C115.318 24.6517 123.693 37.9371 120.682 51.245L98.9848 147.106L98.7467 148.115ZM18.0618 190.159L16.8602 189.654C6.10684 185.005 -3.03026 177.291 -9.50354 167.198C-18.1981 153.647 -21.0243 137.535 -17.4586 121.835C-10.9377 93.1239 15.4288 73.9814 43.8961 75.5528L18.0618 190.159ZM140.407 54.7856C145.295 31.0101 130.222 7.4951 106.447 2.09463C94.7636 -0.557984 82.7498 1.5008 72.6211 7.89285C62.4896 14.2877 55.4617 24.2427 52.8287 35.9288L48.3498 55.7912L47.1706 55.6847C8.32529 52.4551 -28.1083 78.3006 -36.9905 117.398C-41.7551 138.375 -37.982 159.904 -26.3632 178.016C-14.7471 196.122 3.25535 208.528 24.3306 212.945C29.6667 214.066 34.9971 214.601 40.2659 214.601C57.3525 214.601 73.7555 208.945 87.2315 199.091L83.7834 214.335L83.5929 215.214C78.705 238.99 93.7776 262.508 117.553 267.908C120.878 268.661 124.231 269.034 127.561 269.034C135.923 269.034 144.133 266.678 151.379 262.107C161.508 255.715 168.538 245.757 171.171 234.074L175.65 214.209L176.829 214.318C215.697 217.548 252.111 191.702 260.99 152.605C265.755 131.625 261.982 110.096 250.363 91.9867C238.747 73.8805 220.745 61.4746 199.669 57.0545C192.483 55.5471 185.296 55.0948 178.269 55.5926C163.163 56.6626 148.797 62.1227 136.763 70.9282L140.217 55.6651L140.407 54.7856ZM205.683 5.95924C207.011 2.45839 210.677 0.448756 214.325 1.22271C217.973 1.99667 220.516 5.32379 220.318 9.06443C220.121 12.8051 217.243 15.8454 213.534 16.2304L213.433 16.9027C211.816 27.8627 211.249 37.7732 216.076 39.517L216.251 39.5632C221.154 41.1811 227.097 32.8336 232.867 23.154C230.3 20.4469 230.077 16.265 232.342 13.2968C234.606 10.3286 238.684 9.45761 241.953 11.2437C245.223 13.0299 246.711 16.9416 245.46 20.4639C244.21 23.9863 240.594 26.0709 236.937 25.3776L236.672 25.9864C232.361 35.9477 229.037 46.6868 233.082 48.1474C236.274 49.2958 242.553 45.0465 249.391 39.2578C248.326 36.7077 248.863 33.7659 250.759 31.76C252.655 29.7542 255.552 29.0636 258.142 29.9998L258.15 29.9961C260.51 30.818 262.248 32.8509 262.7 35.3188C263.152 37.7867 262.249 40.3088 260.335 41.9224C258.422 43.536 255.793 43.9921 253.452 43.1166C253.156 43.0102 252.868 42.8833 252.589 42.7369L236.575 61.9269C226.372 54.4896 214.608 49.2333 201.87 46.5618C196.647 45.4663 191.375 44.8507 186.102 44.7094L185.917 18.6976C185.649 18.6334 185.385 18.5544 185.126 18.4611C182.029 17.3442 180.139 14.1957 180.602 10.9224C181.064 7.64918 183.751 5.15134 187.035 4.94185C190.319 4.73241 193.297 6.86887 194.165 10.0572C195.034 13.2456 193.554 16.6091 190.622 18.1105L190.768 18.8975C192.36 27.3317 194.472 34.1805 197.537 35.2892C201.665 36.7795 206 25.9126 209 15.2684C205.763 13.4098 204.356 9.46013 205.683 5.95924Z"
          fill='url("#lockedIconGradient")'
        />
      </g>

      {/* Logo Mark */}
      <g
        transform={`translate(${CARD_WIDTH - X_PAD - 36},${X_PAD})`}
        className="w-2"
      >
        <svg height="32" width="36" viewBox="0 0 46 40">
          <path
            fill={logoMarkFill}
            fillRule="evenodd"
            clipRule="evenodd"
            d="M26.5826 11.8887C26.6896 11.8887 26.7969 11.8917 26.9043 11.897L22.7561 30.3009L22.7314 30.4009C22.5415 31.1285 22.0894 31.747 21.4494 32.151C20.781 32.5726 19.9886 32.709 19.2172 32.5335C17.6289 32.1727 16.6292 30.5868 16.989 28.9982L19.5786 17.5549L19.6074 17.4328C20.4125 14.1463 23.3627 11.8887 26.5826 11.8887ZM29.2385 12.4157C30.5846 12.9633 31.7275 13.9069 32.529 15.1565C33.5669 16.7745 33.9042 18.6977 33.4786 20.5719C32.6998 23.9991 29.5524 26.2842 26.1546 26.0966L29.2385 12.4157ZM16.4429 20.5655C15.612 23.962 12.4901 26.2604 9.1454 26.1036L13.2942 7.69941L13.3186 7.59944C13.5085 6.87186 13.9609 6.25294 14.6003 5.84936C15.269 5.42739 16.0618 5.29164 16.8328 5.46685C18.4211 5.82763 19.4208 7.41353 19.0614 9.0021L16.4714 20.4451L16.4429 20.5655ZM6.81152 25.5843L6.66807 25.5242C5.38444 24.9691 4.29374 24.0483 3.52102 22.8435C2.48314 21.2259 2.14577 19.3026 2.57142 17.4285C3.34982 14.0012 6.49721 11.7162 9.89538 11.9037L6.81152 25.5843ZM21.416 9.42474C21.9994 6.58664 20.2002 3.77964 17.3621 3.13498C15.9675 2.81833 14.5334 3.06409 13.3243 3.82712C12.1149 4.59047 11.276 5.77881 10.9617 7.17379L10.427 9.54478L10.2863 9.53207C5.64926 9.14655 1.30016 12.2317 0.239881 16.8988C-0.328877 19.4029 0.121515 21.9728 1.50847 24.1349C2.89508 26.2962 5.04406 27.7771 7.55983 28.3044C8.1968 28.4382 8.8331 28.502 9.46204 28.502C11.5017 28.502 13.4597 27.8269 15.0684 26.6506L14.6568 28.4703L14.634 28.5752C14.0506 31.4133 15.8498 34.2207 18.6879 34.8653C19.0848 34.9553 19.485 34.9998 19.8826 34.9998C20.8807 34.9998 21.8607 34.7186 22.7257 34.1729C23.9348 33.4099 24.774 32.2212 25.0883 30.8265L25.623 28.4552L25.7637 28.4683C30.4034 28.8538 34.7502 25.7686 35.8101 21.1015C36.3789 18.5971 35.9285 16.0271 34.5415 13.8655C33.1549 11.7041 31.0059 10.2232 28.4902 9.69558C27.6323 9.51564 26.7744 9.46166 25.9356 9.52107C24.1324 9.6488 22.4175 10.3006 20.981 11.3517L21.3932 9.52973L21.416 9.42474ZM29.208 3.5963C29.3665 3.1784 29.8042 2.93851 30.2396 3.0309C30.6751 3.12328 30.9786 3.52044 30.9551 3.96697C30.9315 4.41349 30.5879 4.77642 30.1452 4.82237L30.1332 4.90262C29.9402 6.21093 29.8725 7.39396 30.4487 7.60211L30.4695 7.60764C31.0548 7.80076 31.7642 6.80431 32.453 5.64885C32.1466 5.32571 32.12 4.82651 32.3903 4.47219C32.6606 4.11788 33.1474 4.0139 33.5377 4.22711C33.9279 4.44033 34.1055 4.90727 33.9563 5.32773C33.807 5.7482 33.3753 5.99705 32.9388 5.91429L32.9072 5.98696C32.3926 7.17605 31.9958 8.45798 32.4786 8.63233C32.8597 8.76942 33.6093 8.26217 34.4255 7.57118C34.2984 7.26677 34.3625 6.9156 34.5888 6.67616C34.8151 6.43672 35.1609 6.35428 35.4701 6.46604L35.471 6.4656C35.7527 6.56371 35.9602 6.80638 36.0142 7.10097C36.0682 7.39557 35.9603 7.69663 35.7319 7.88925C35.5035 8.08187 35.1897 8.13631 34.9103 8.03181C34.8749 8.0191 34.8405 8.00395 34.8073 7.98648L32.8956 10.2772C31.6776 9.38941 30.2734 8.76196 28.7529 8.44306C28.1294 8.31229 27.5001 8.23881 26.8706 8.22194L26.8486 5.11689C26.8166 5.10922 26.785 5.0998 26.7541 5.08865C26.3844 4.95534 26.1589 4.57949 26.214 4.18876C26.2692 3.79803 26.5899 3.49986 26.9819 3.47485C27.374 3.44985 27.7295 3.70488 27.8331 4.08548C27.9368 4.46608 27.7601 4.86759 27.4101 5.0468L27.4276 5.14075C27.6177 6.14754 27.8698 6.96509 28.2356 7.09745C28.7284 7.27534 29.2459 5.97815 29.6039 4.70754C29.2176 4.48568 29.0496 4.0142 29.208 3.5963Z"
          />
        </svg>
      </g>

      {isCompleted && (
        <g transform={`translate(${X_PAD},28)`}>
          <svg width="20" height="20" viewBox="0 0 20 20">
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M18.0709 7.26937L18.0899 7.23364L18.1193 7.16006C18.126 7.1436 18.1328 7.12666 18.1397 7.10923C18.2654 6.79575 18.4518 6.33052 18.5392 5.86041C18.6363 5.33823 18.6554 4.58818 18.1752 3.88922L18.174 3.88754C17.6921 3.18838 16.9825 2.94883 16.454 2.86883C15.9542 2.79318 15.4358 2.83298 15.0999 2.85876C15.0811 2.8602 15.0627 2.86185 15.0448 2.86364C15.0429 2.85493 15.041 2.84609 15.0389 2.83711C14.9575 2.46284 14.828 1.86826 14.5607 1.3595C14.3171 0.895789 13.8871 0.36286 13.1538 0.119829C12.3176 -0.15795 11.5889 0.096152 11.1012 0.381823C10.678 0.629652 10.3036 0.979521 10.0548 1.21361L10.0438 1.22245C9.79559 0.99358 9.41516 0.64277 8.98547 0.392573C8.51499 0.118615 7.79429 -0.147201 6.96186 0.111532C6.13355 0.368991 5.68473 0.995163 5.44638 1.48784C5.22324 1.94911 5.1028 2.46062 5.02273 2.8241C5.00625 2.8223 4.98942 2.82065 4.97229 2.81915C4.68416 2.79391 4.27128 2.75909 3.86216 2.79159C3.28919 2.83596 2.44385 3.03873 1.88831 3.85273M3.97382 4.2157C3.59933 4.24446 3.27285 4.35789 3.06801 4.65825C2.70512 5.1897 2.97937 5.87259 3.25433 6.55724L3.25525 6.55952C3.26164 6.57866 3.26972 6.59718 3.27909 6.61505C3.43051 6.90379 3.52571 7.21741 3.56124 7.54045C3.57526 7.66793 3.55465 7.79959 3.46545 7.89175C3.29451 8.06837 2.97035 8.27595 2.71593 8.43682C2.08537 8.82985 1.42921 9.25483 1.42921 9.9099C1.42921 10.5633 2.08537 10.99 2.71593 11.3893L2.81994 11.4549L2.82506 11.4581C3.08413 11.6219 3.38778 11.8141 3.51599 11.9748C3.56872 12.0408 3.575 12.1287 3.56815 12.213C3.53899 12.5714 3.43523 12.9208 3.26486 13.2394L3.26256 13.2453C2.98481 13.9384 2.70093 14.647 3.06801 15.1696C3.43609 15.6936 4.19949 15.6361 4.92765 15.5706C5.1504 15.5276 5.37673 15.5163 5.6008 15.5357C5.87679 15.5598 6.11414 15.7395 6.22034 15.9953C6.31369 16.2202 6.37798 16.4563 6.41121 16.6985C6.56508 17.4004 6.72749 18.132 7.25363 18.3849C7.31845 18.416 7.38411 18.4461 7.45007 18.4748C7.56591 18.5252 7.6967 18.5221 7.81898 18.4904C8.30308 18.3651 8.73823 18.0945 9.06625 17.7131C9.0794 17.7013 9.09273 17.6894 9.10624 17.6772C9.20292 17.5907 9.30842 17.4962 9.41515 17.4079C9.6456 17.2162 9.87766 17.0516 10.0169 17.0516C10.2185 17.0516 10.604 17.3957 10.9093 17.6683C10.9263 17.6834 10.9431 17.6984 10.9595 17.7131L10.9844 17.7353C11.5255 18.219 12.0825 18.7168 12.6719 18.5311C13.2689 18.3426 13.4913 17.5501 13.6226 16.8055C13.6518 16.5633 13.7133 16.3266 13.8052 16.1016C13.9096 15.8458 14.1468 15.667 14.4221 15.6429C14.6386 15.6237 14.8574 15.6332 15.0729 15.6717C15.0886 15.6745 15.1045 15.6759 15.1205 15.6759C15.8503 15.7431 16.5929 15.8086 16.9658 15.275C17.3275 14.7558 17.0602 14.0911 16.7898 13.4217L16.761 13.3449C16.6922 13.2155 16.6345 13.0814 16.5881 12.9439C16.5255 12.7539 16.4844 12.5581 16.4665 12.3586C16.4565 12.2481 16.4718 12.1337 16.5463 12.0514C16.6758 11.9086 16.9151 11.7447 17.1268 11.5997C17.179 11.5638 17.2295 11.5292 17.2763 11.4965C17.5595 11.3191 17.846 11.137 18.078 10.9325C18.3678 10.6768 18.571 10.3844 18.571 10.0154C18.571 9.3539 17.9484 8.8714 17.3099 8.47835L17.2619 8.4496C16.9306 8.2403 16.4905 7.96071 16.4905 7.77377C16.5 7.37434 16.6041 6.98292 16.793 6.62982L16.7962 6.62162C17.0737 5.92764 17.3564 5.22019 16.9977 4.6982C16.6506 4.19444 15.9209 4.22841 15.2092 4.28305C15.1565 4.2871 15.1044 4.29554 15.0525 4.30569C14.8632 4.3428 14.6705 4.35735 14.4788 4.34938C14.1905 4.33739 13.9379 4.15394 13.8308 3.88598C13.7423 3.6644 13.6831 3.4315 13.6546 3.19317C13.5633 2.77616 13.4689 2.35277 13.2961 2.02365C13.16 1.76483 12.9744 1.56511 12.704 1.47564C12.0894 1.27113 11.5405 1.7776 10.9916 2.29366L10.9675 2.31284C10.6603 2.59083 10.257 2.94872 10.0489 2.94872C9.83605 2.94872 9.41034 2.57166 9.09827 2.29366C8.55734 1.79518 7.9924 1.28711 7.38585 1.47564C6.77931 1.66417 6.57445 2.41669 6.41121 3.16121C6.37944 3.40011 6.31686 3.63346 6.2254 3.85557C6.1176 4.11731 5.87152 4.29882 5.58876 4.31246C5.3941 4.32184 5.19834 4.30664 5.00599 4.26686C4.95365 4.25603 4.90093 4.24684 4.84768 4.24217C4.55006 4.21611 4.24846 4.1937 3.97382 4.2157ZM18.0709 7.26937C18.4144 7.48143 18.8581 7.77903 19.2245 8.17186C19.6055 8.58044 19.9994 9.19797 19.9994 10.0154C19.9994 10.9771 19.4495 11.6274 19.0232 12.0035C18.7023 12.2864 18.3319 12.5208 18.0649 12.6879C18.0564 12.694 18.0477 12.7 18.039 12.7059L18.0656 12.756L18.1208 12.9027C18.1246 12.9121 18.1284 12.9215 18.1323 12.9313C18.2543 13.2325 18.4393 13.6894 18.5217 14.1569C18.6154 14.6892 18.61 15.4137 18.1379 16.0914L18.1367 16.0932C17.6386 16.8059 16.916 17.0454 16.3606 17.1174C15.874 17.1805 15.3652 17.1334 15.0361 17.1028C15.0326 17.1024 15.0292 17.1022 15.0258 17.1018L15.0208 17.1016C14.95 17.4939 14.8367 18.0081 14.6167 18.48C14.3886 18.9698 13.9433 19.6276 13.1021 19.8933C12.2614 20.158 11.5351 19.8788 11.0751 19.6093C10.6702 19.3721 10.3009 19.0411 10.0582 18.8235C10.0448 18.8115 10.0318 18.7998 10.0191 18.7885C9.51869 19.3149 8.881 19.691 8.17705 19.8733C7.85793 19.9559 7.37957 20.0017 6.88063 19.7848C6.79733 19.7487 6.71516 19.711 6.63471 19.6723C5.91524 19.3264 5.55914 18.7044 5.37371 18.2582C5.19734 17.8338 5.0948 17.3651 5.02446 17.0436C5.02154 17.0303 5.01868 17.0173 5.01588 17.0044L5.01425 16.9971C4.67803 17.0273 4.16786 17.0717 3.67732 17.0075C3.13535 16.9366 2.40107 16.7053 1.89906 15.9906C1.40869 15.2924 1.4223 14.539 1.51882 14.0114C1.60543 13.5382 1.79318 13.0709 1.91888 12.7579C1.92573 12.7409 1.93239 12.7244 1.93885 12.7082L1.96805 12.6353L1.97957 12.6138L1.9515 12.5962L1.92724 12.5807C1.63588 12.3963 1.19529 12.1174 0.835726 11.7645C0.447108 11.3834 0.000732422 10.7685 0.000732422 9.9099C0.000732422 9.05088 0.446525 8.43563 0.837869 8.05331C1.20331 7.69628 1.65045 7.41765 1.9444 7.23446L1.95637 7.22701C1.96451 7.22185 1.97261 7.21673 1.98068 7.21163C1.95944 7.16678 1.93898 7.11887 1.92005 7.06795C1.91685 7.05996 1.91359 7.05186 1.91028 7.04366C1.78618 6.73543 1.60024 6.27364 1.51602 5.80295C1.42057 5.26947 1.4202 4.53875 1.88831 3.85273"
              fill={labelFill}
            />
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M13.9109 6.63845C14.2901 6.9563 14.3394 7.52082 14.0211 7.89933L8.84953 14.0474L5.95234 10.914C5.61653 10.5508 5.63921 9.98462 6.00302 9.64937C6.36681 9.31412 6.93397 9.33676 7.26978 9.69995L8.78591 11.3397L12.6479 6.74829C12.9664 6.36977 13.5318 6.3206 13.9109 6.63845Z"
              fill={labelFill}
            />
          </svg>
        </g>
      )}

      {/* Card Label */}
      <text
        x={isCompleted ? X_PAD + 26 : X_PAD}
        y="40"
        fill={labelFill}
        fontSize="14"
        fontWeight={700}
        letterSpacing={2.24}
        dominantBaseline="middle"
        className="uppercase"
      >
        {label}
      </text>

      {/* Balance */}
      <text
        x={X_PAD}
        y="86"
        fill={DEFAULT_TEXT_FILL}
        fontSize="12"
        fontWeight={700}
        dominantBaseline="middle"
      >
        DROPPP BALANCE
      </text>
      <g transform={`translate(${X_PAD},125)`}>
        <text fill={balanceFill} fontSize="30" fontWeight={900}>
          {priceString}
          <tspan
            fontSize={12}
            dx={10}
            fontWeight={600}
            fill={DEFAULT_TEXT_FILL}
          >
            USDC
          </tspan>
        </text>
      </g>

      {/* Buttons */}
      <g transform={`translate(${X_PAD},148)`}>
        <WalletCardButton
          isFull={!showWithdrawFunds}
          label="add funds"
          onClick={onAddFunds}
          disabled={preventAddFunds}
        />
      </g>

      {showWithdrawFunds && (
        <g transform={`translate(${CARD_WIDTH / 2 + BUTTON_GAP / 2},148)`}>
          <WalletCardButton
            disabled={preventWithdrawFunds}
            label="withdraw"
            theme="secondary"
            onClick={onWithdrawFunds}
          />
        </g>
      )}
    </svg>
  )
}

interface WalletCardButtonProps {
  label: string
  theme?: 'primary' | 'secondary'
  onClick: () => void
  disabled?: boolean
  isFull?: boolean
}

const WalletCardButton = ({
  label,
  theme = 'primary',
  onClick,
  disabled = false,
  isFull
}: WalletCardButtonProps) => {
  const buttonFill = () => {
    if (disabled) {
      return 'transparent'
    } else {
      return theme === 'primary' ? '#3667FB' : 'rgba(255, 255, 255, 0.15)'
    }
  }

  const handleButtonEvent = () => {
    disabled ? null : onClick()
  }

  const disabledColor = designSystem.colors['gray-400']
  const textFill = disabled ? disabledColor : 'white'
  const width = isFull
    ? CARD_WIDTH - X_PAD * 2
    : CARD_WIDTH / 2 - BUTTON_GAP / 2 - X_PAD
  const textX = isFull ? CARD_WIDTH / 2 - X_PAD : 69.75

  return (
    <g
      className={classNames('origin-center', {
        ['duration-button hover:scale-110 transition-transform cursor-pointer transform-gpu']:
          !disabled,
        ['cursor-not-allowed']: disabled
      })}
      tabIndex={0}
      role="button"
      style={{ transformBox: 'fill-box' }}
      onClick={handleButtonEvent}
      onKeyDown={event => {
        if (event.key === 'Enter' || event.key === ' ') {
          handleButtonEvent()
        }
      }}
      rx="16"
    >
      <rect
        height={40}
        width={width}
        rx="16"
        fill={buttonFill()}
        stroke={disabledColor}
        strokeWidth={disabled ? 1 : 0}
      />
      <text
        dy={21}
        dx={textX}
        fill={textFill}
        fontSize={14}
        fontWeight={700}
        dominantBaseline="middle"
        textAnchor="middle"
        className="uppercase"
      >
        {label}
      </text>
    </g>
  )
}

export default WalletCard
